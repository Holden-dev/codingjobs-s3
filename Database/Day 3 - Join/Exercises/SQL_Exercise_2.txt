Part 1 :
	- Retrieve books that are under 50 years old (released less than 50 years ago).
	
	SELECT *
	FROM books
	WHERE YEAR(NOW()) - YEAR(publication_date) < 50

	- Retrieve all the authors that are Female (gender)
	SELECT *
	FROM authors
	WHERE gender = "Female"

Part 2:
	- Get all the books from the author "JK Rowling"
	
	SELECT title
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	WHERE a.name LIKE '%J.K. Rowling%'

	- Get all the author's books that are not "JK Rowling"
	
	SELECT title
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	WHERE a.name NOT LIKE '%J.K. Rowling%'

	- Retrieve all books whose author has the letter 's' in his name or first name.
	
	SELECT title
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	WHERE a.name LIKE '%s%'


Part 3:
	- Retrieve the chepeast book with author's name
	
	SELECT title, name
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	ORDER BY price LIMIT 1;

	SELECT title, name, price
	FROM books b
    INNER JOIN authors a ON b.author_id = a.id
	WHERE price = (SELECT MIN(price) FROM books)

	- Retrieve the most expansive book with author's name

	SELECT title, name
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	ORDER BY price DESC LIMIT 1;

	SELECT title, name, price
	FROM books b
    INNER JOIN authors a ON b.author_id = a.id
	WHERE price = (SELECT MAX(price) FROM books)
	

	- Retrieve the 3 most expansive books with author's name
	SELECT title, name
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	ORDER BY price DESC LIMIT 3;

Part 4:
	- Get all the books from the youngest to the oldest author
	SELECT title, name
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	ORDER BY birth_year DESC

	- Retrieve the number of books by author (with the name of the author)
	SELECT name, COUNT(*)
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	GROUP BY a.id

Part 6:
	- Get the sum of price for all the books from the author 'JK Rowling'
	SELECT SUM(price)
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	WHERE a.name LIKE '%J.K. Rowling%'

	- Get the sum of price for all books by author
	SELECT name, SUM(price)
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	GROUP BY a.id

	- Get average price of all books by author
	SELECT name, AVG(price)
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	GROUP BY a.id

	- Get the sum of the price of all books by gender
	SELECT gender, SUM(price)
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	GROUP BY gender

Part 7:
	- Get the author who makes the highest number of sales.

	- Retrieve gender that has more than 3 books
	SELECT gender, COUNT(*) as Total
	FROM books b
	INNER JOIN authors a ON b.author_id = a.id
	GROUP BY gender
	HAVING Total > 3


Part 8:
	- All JK Rowling's books have made 20 more price. Update these books.
		
	UPDATE books b
	INNER JOIN authors a ON b.author_id = a.id
	SET price = price + 20
	WHERE a.name LIKE '%J.K. Rowling%'